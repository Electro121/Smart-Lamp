#include <Arduino.h>
#include <WiFi.h>
#include <AsyncTCP.h>
#include <ESPAsyncWebServer.h>
#include <Arduino_JSON.h>
#include <ESPmDNS.h>

const char* ssid = "Enkindu";
const char* password = "rimon@555";

JSONVar readings;

unsigned long lastTime = 0;
unsigned long timerDelay = 500;

AsyncWebServer server(80);
AsyncWebSocket ws("/ws");

int sensorValue = 0;

String getSensorReading() {
  readings["sensorValue"] = String(sensorValue);
  String jsonString = JSON.stringify(readings);
  return jsonString;
}

void notifyClients(String sensorReadings) {
  ws.textAll(sensorReadings);
}

void handleWebSocketMessage(void* arg, uint8_t* data, size_t len) {
  AwsFrameInfo* info = (AwsFrameInfo*)arg;
  if (info->final && info->index == 0 && info->len == len && info->opcode == WS_TEXT) {
    String command = String((char*)data);
    if (command == "getReadings") {
      String sensorReadings = getSensorReading();
      notifyClients(sensorReadings);
    }
  }
}

void onEvent(AsyncWebSocket* server, AsyncWebSocketClient* client, AwsEventType type, void* arg, uint8_t* data, size_t len) {
  switch (type) {
    case WS_EVT_CONNECT:
      Serial.printf("WebSocket client #%u connected from %s\n", client->id(), client->remoteIP().toString().c_str());
      break;
    case WS_EVT_DISCONNECT:
      Serial.printf("WebSocket client #%u disconnected\n", client->id());
      break;
    case WS_EVT_DATA:
      handleWebSocketMessage(arg, data, len);
      break;
    case WS_EVT_PONG:
    case WS_EVT_ERROR:
      break;
  }
}

void initWebSocket() {
  ws.onEvent(onEvent);
  server.addHandler(&ws);
}

const char index_html[] PROGMEM = R"rawliteral(
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta http-equiv="X-UA-Compatible" content="ie=edge">
  <title>LDR Sensor Readings</title>
</head>
<body>
  <h2>LDR Sensor value: <span id="sensorValue">0</span></h2>
  <button id="getReadingsBtn">Get Readings</button>
  <script>
    var gateway = `ws://${window.location.hostname}/ws`;
    var websocket;

    window.addEventListener('load', onLoad);

    function onLoad(event) {
      initWebSocket();
    }

    function initWebSocket() {
      console.log('Trying to open a WebSocket connection...');
      websocket = new WebSocket(gateway);
      websocket.onopen = onOpen;
      websocket.onclose = onClose;
      websocket.onmessage = onMessage;
    }

    function onOpen(event) {
      console.log('Connection opened');
    }

    function onClose(event) {
      console.log('Connection closed');
      setTimeout(initWebSocket, 2000);
    }

    function getReadings() {
      websocket.send('getReadings');
    }

    function onMessage(event) {
      var valueElement = document.getElementById('sensorValue');
      valueElement.textContent = JSON.parse(event.data).sensorValue;
    }
  </script>
</body>
</html>
)rawliteral";

void setup() {
  Serial.begin(115200);
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }

  Serial.println(WiFi.localIP());
  if (MDNS.begin("ESP")) {
    Serial.println("Your mDNS server name is esp.local/");
  }

  server.on("/", HTTP_GET, [](AsyncWebServerRequest *request) {
    request->send_P(200, "text/html", index_html);
  });

  pinMode(13, INPUT);

  initWebSocket();

  server.begin();
}

void loop() {
  sensorValue = digitalRead(13);
  Serial.println(sensorValue);
  if ((millis() - lastTime) > timerDelay) {
    String sensorReadings = getSensorReading();
    notifyClients(sensorReadings);
    lastTime = millis();
  }
  ws.cleanupClients();
}

#include <Arduino.h>
#include <WiFi.h>
#include <AsyncTCP.h>
#include <ESPAsyncWebServer.h>
#include <Arduino_JSON.h>
#include <ESPmDNS.h>
#include <SPIFFS.h>

#define buzzer 27

const char* ssid = "Enkindu";
const char* password = "rimon@555";

unsigned long lastTime = 0;
unsigned long timerDelay = 1500;

AsyncWebServer server(80);
AsyncWebSocket ws("/ws");

int status = 0;

void notifyClients() {
  ws.textAll(String(status));
}

String incoMessage;

void handleWebSocketMessage(void* arg, uint8_t* data, size_t len) {
  AwsFrameInfo* info = (AwsFrameInfo*)arg;

  if (info->final && info->index == 0) {
    incoMessage = String((char*)data, len);
  } else {
    incoMessage += String((char*)data, len);
  }
}

void processReceivedMessage(const String& message) {
  // Handle the received message here
  Serial.println("Received message: " + message);
}

void fun() {

  Serial.println(incoMessage);
  if (status == 1) {
    notifyClients();
  } else if (status == 0) {
    digitalWrite(LED_BUILTIN, LOW);
    if ((millis() - lastTime) > timerDelay) {
      ws.textAll(String(0));
      lastTime = millis();
    }
  }
}

void onEvent(AsyncWebSocket* server, AsyncWebSocketClient* client, AwsEventType type, void* arg, uint8_t* data, size_t len) {
  switch (type) {
    case WS_EVT_CONNECT:
      Serial.printf("WebSocket client #%u connected from %s\n", client->id(), client->remoteIP().toString().c_str());
      notifyClients();
      break;
    case WS_EVT_DISCONNECT:
      Serial.printf("WebSocket client #%u disconnected\n", client->id());
      break;
    case WS_EVT_DATA:
      handleWebSocketMessage(arg, data, len);
      // fun();
      break;
    case WS_EVT_PONG:
    case WS_EVT_ERROR:
      break;
  }
}

void initWebSocket() {
  ws.onEvent(onEvent);
  server.addHandler(&ws);
}

const char index_html[] PROGMEM = R"rawliteral(
<!DOCTYPE html>
<html lang="en">
    <head>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css" integrity="sha512-z3gLpd7yknf1YoNbCzqRKc4qyor8gaKU1qmn+CShxbuBusANI9QpRohGBreCFkKxLhei6S9CQXFEbbKuqLg0DA==" crossorigin="anonymous" referrerpolicy="no-referrer" />
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta http-equiv="X-UA-Compatible" content="ie=edge" />
    <title>Smart Light</title>
    <style>
        .head {
            font-family: Arial, sans-serif;
            background-color: #3498db;
            color: #fff;
            text-align: center;
            padding: 1em 0;
            border-radius: 10px;
        }
        .heaf {
            font-family: Arial, sans-serif;
            text-align: center;
            margin-top: 30px;
            color: rgb(0, 0, 0);
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            padding: 1em;
            background-color: #ffffff;
            border: 8px;
            font-size: 28px;
            border-radius: 8px;
            margin-left: 50px;
            margin-right: 50px;
        }
        #ok {
            text-align: center;
            margin-top: 50px;
            border-radius: 10px;
        }
        #button {
            display: flex;
            justify-content: center;
            align-items: center;
            margin-top: 30px;
        }
        #btn {
            cursor: pointer;
        }

        .power-button {
            display: flex;
            justify-content: center;
            align-items: center;
            margin-top: 20px;
        }
        #power-btn {
            cursor: pointer;
            padding: 10px 20px;
            background-color: #d62830;
            color: white;
            border: none;
            border-radius: 5px;
            font-size: 16px;
            transition: background-color 0.3s;
        }
        /*#power-btn:hover {
            background-color: #2980b9;
        }*/
        
        footer {
            color: black;
            font-size: smaller;
            margin-bottom: 0;
        }
    </style>
    </head>
    <body>
        <div class="head">
            <h1>Smart Light Control</h1>
        </div>
        <section class="heaf">
            <p2 id="ok"><strong>Light Status:</strong></p2>
            <span id="key">OFF</span>
        <div id="button">
            <i id="btn" class="fa-regular fa-lightbulb fa-8x" type="button"></i>
        </div>
        </section>
        <div class="power-button">
            <button id="power-btn" class="p2btn" type="button">System Off</button>
        </div>
        <footer>
            <p id="footer">&copy; RS63 Robotics Group-5 All rights reserved.</p>
        </footer>
    </body>
    <script>
        
        var gateway = `ws://${window.location.hostname}/ws`;
        var websocket;
        // Init web socket when the page loads
        window.addEventListener('load', onload);

        function onload(event) {
            initWebSocket();
        }
        const bnt = document.getElementById("btn");
        const btxt = document.getElementById("key");

        function initWebSocket() {
            console.log('Trying to open a WebSocket connectionâ€¦');
            websocket = new WebSocket(gateway);
            websocket.onopen = onOpen;
            websocket.onclose = onClose;
            websocket.onmessage = onMessage;
        }

        // When websocket is established, call the getReadings() function
        function onOpen(event) {
            console.log('Connection opened');
        }

        function onClose(event) {
            console.log('Connection closed');
            setTimeout(initWebSocket, 2000);
        }
        let dt;
        function onMessage(event) {
            console.log(event.data);
            dt = event.data
           // btxt.innerHTML = dt;
           handleText();
        }
        function handleText() {
            if(dt== "1" && pressed == true) {
                btxt.textContent = "ON";
                bnt.classList.replace("fa-regular", "fa-solid");
            }
            else {
                btxt.textContent = "OFF";
                bnt.classList.replace("fa-solid", "fa-regular");
            }
        }

        const pBtn = document.getElementById("power-btn");
        let pressed = false;
        pBtn.addEventListener('click', function(e) {
            if(pressed == false) {
                        pressed = true;
                        console.log("Button has been clicked");
                        pBtn.innerHTML = "System On";
                        pBtn.style.backgroundColor = '#1bc531';
                        websocket.send('on');
                        handleText();

                } else {
                    pressed = false;
                    pBtn.innerHTML = "System Off";
                    pBtn.style.backgroundColor = '#d62830';
                    websocket.send('off');
                    handleText();
                }
        });

    </script>
</html>
)rawliteral";
const int relayPin = 26;
void setup() {
  Serial.begin(115200);
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }
  if (MDNS.begin("smartlight")) {
    Serial.println("Your mDNS server name is smartlight.local/");
  }
  Serial.print("/nLocal IP: ");
  Serial.print(WiFi.localIP());
  Serial.println("\nSubnet Musk: ");
  Serial.print(WiFi.subnetMask());
  Serial.println("\nGateway IP: ");
  Serial.print(WiFi.gatewayIP());
  Serial.println("\nDNS 1: ");
  Serial.print(WiFi.dnsIP(0));
  Serial.println("\nDNS 2: ");
  Serial.print(WiFi.dnsIP(1));


  server.on("/", HTTP_GET, [](AsyncWebServerRequest* request) {
    request->send_P(200, "text/html", index_html);
  });


  initWebSocket();

  server.begin();
  pinMode(LED_BUILTIN, OUTPUT);
  pinMode(relayPin, OUTPUT);
  pinMode(buzzer, OUTPUT);
  pinMode(13, INPUT);
}
int newStat = 0;
void loop() {

  status = digitalRead(13);
  if (incoMessage == "on" && status == 1) {
    digitalWrite(LED_BUILTIN, HIGH);
    digitalWrite(relayPin, HIGH);
    if (status != newStat) {
      newStat = status;
      digitalWrite(buzzer, HIGH);
      delay(100);
      digitalWrite(buzzer, LOW);
      notifyClients();
    }
  } else if (incoMessage == "off" || status == 0) {
    digitalWrite(LED_BUILTIN, LOW);
    digitalWrite(relayPin, LOW);
    if (status != newStat) {
      newStat = status;
      notifyClients();
    }
  }
  ws.cleanupClients();
  delay(100);
}
